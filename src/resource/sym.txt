name const kind const_Re level 0 line 1
name c1 kind id level 0 line 1
name = kind =_op level 0 line 1
name 2 kind number level 0 line 1
name ; kind ;_bd level 0 line 1
name var kind var_Re level 0 line 2
name v1 kind id level 0 line 2
name , kind ,_bd level 0 line 2
name v2 kind id level 0 line 2
name , kind ,_bd level 0 line 2
name v3 kind id level 0 line 2
name , kind ,_bd level 0 line 2
name v4 kind id level 0 line 2
name ; kind ;_bd level 0 line 2
name procedure kind procedure_Re level 0 line 3
name p1 kind id level 0 line 3
name ; kind ;_bd level 0 line 3
name var kind var_Re level 0 line 4
name v5 kind id level 0 line 4
name ; kind ;_bd level 0 line 4
name begin kind begin_Re level 1 line 5
name v5 kind id level 1 line 6
name := kind :=_op level 1 line 6
name 2 kind number level 1 line 6
name ; kind ;_bd level 1 line 6
name write kind write_Re level 1 line 7
name ( kind (_bd level 1 line 7
name v5 kind id level 1 line 7
name / kind /_op level 1 line 7
name 2 kind number level 1 line 7
name + kind +_op level 1 line 7
name 2 kind number level 1 line 7
name - kind -_op level 1 line 7
name 1 kind number level 1 line 7
name ) kind )_bd level 1 line 7
name ; kind ;_bd level 1 line 7
name while kind while_Re level 1 line 8
name v3 kind id level 1 line 8
name # kind #_op level 1 line 8
name 0 kind number level 1 line 8
name do kind do_Re level 1 line 9
name begin kind begin_Re level 2 line 9
name v4 kind id level 2 line 10
name := kind :=_op level 2 line 10
name v1 kind id level 2 line 10
name / kind /_op level 2 line 10
name v2 kind id level 2 line 10
name ; kind ;_bd level 2 line 10
name v3 kind id level 2 line 11
name := kind :=_op level 2 line 11
name v1 kind id level 2 line 11
name - kind -_op level 2 line 11
name v4 kind id level 2 line 11
name * kind *_op level 2 line 11
name v2 kind id level 2 line 11
name ; kind ;_bd level 2 line 11
name v1 kind id level 2 line 12
name := kind :=_op level 2 line 12
name v2 kind id level 2 line 12
name ; kind ;_bd level 2 line 12
name v2 kind id level 2 line 13
name := kind :=_op level 2 line 13
name v3 kind id level 2 line 13
name ; kind ;_bd level 2 line 13
name end kind end_Re level 2 line 14
name ; kind ;_bd level 1 line 14
name end kind end_Re level 1 line 15
name ; kind ;_bd level 0 line 15
name procedure kind procedure_Re level 0 line 16
name p2 kind id level 0 line 16
name ; kind ;_bd level 0 line 16
name const kind const_Re level 0 line 17
name c2 kind id level 0 line 17
name = kind =_op level 0 line 17
name 2 kind number level 0 line 17
name ; kind ;_bd level 0 line 17
name procedure kind procedure_Re level 0 line 18
name p3 kind id level 0 line 18
name ; kind ;_bd level 0 line 18
name begin kind begin_Re level 1 line 19
name if kind if_Re level 1 line 20
name v1 kind id level 1 line 20
name # kind #_op level 1 line 20
name 1 kind number level 1 line 20
name then kind then_Re level 1 line 21
name begin kind begin_Re level 2 line 21
name v1 kind id level 2 line 22
name := kind :=_op level 2 line 22
name v1 kind id level 2 line 22
name - kind -_op level 2 line 22
name 1 kind number level 2 line 22
name ; kind ;_bd level 2 line 22
name v2 kind id level 2 line 23
name := kind :=_op level 2 line 23
name v2 kind id level 2 line 23
name * kind *_op level 2 line 23
name v1 kind id level 2 line 23
name ; kind ;_bd level 2 line 23
name call kind call_Re level 2 line 24
name p3 kind id level 2 line 24
name ; kind ;_bd level 2 line 24
name end kind end_Re level 2 line 25
name ; kind ;_bd level 1 line 25
name end kind end_Re level 1 line 26
name ; kind ;_bd level 0 line 26
name begin kind begin_Re level 1 line 27
name call kind call_Re level 1 line 28
name p3 kind id level 1 line 28
name ; kind ;_bd level 1 line 28
name if kind if_Re level 1 line 29
name odd kind odd_Re level 1 line 29
name c2 kind id level 1 line 29
name then kind then_Re level 1 line 30
name write kind write_Re level 1 line 30
name ( kind (_bd level 1 line 30
name c2 kind id level 1 line 30
name ) kind )_bd level 1 line 30
name ; kind ;_bd level 1 line 30
name if kind if_Re level 1 line 31
name c2 kind id level 1 line 31
name = kind =_op level 1 line 31
name 2 kind number level 1 line 31
name then kind then_Re level 1 line 32
name write kind write_Re level 1 line 32
name ( kind (_bd level 1 line 32
name c2 kind id level 1 line 32
name + kind +_op level 1 line 32
name 1 kind number level 1 line 32
name ) kind )_bd level 1 line 32
name ; kind ;_bd level 1 line 32
name end kind end_Re level 1 line 33
name ; kind ;_bd level 0 line 33
name begin kind begin_Re level 1 line 34
name read kind read_Re level 1 line 35
name ( kind (_bd level 1 line 35
name v1 kind id level 1 line 35
name , kind ,_bd level 1 line 35
name v2 kind id level 1 line 35
name ) kind )_bd level 1 line 35
name ; kind ;_bd level 1 line 35
name if kind if_Re level 1 line 36
name v1 kind id level 1 line 36
name < kind <_op level 1 line 36
name v2 kind id level 1 line 36
name then kind then_Re level 1 line 37
name begin kind begin_Re level 2 line 37
name v3 kind id level 2 line 38
name := kind :=_op level 2 line 38
name v1 kind id level 2 line 38
name ; kind ;_bd level 2 line 38
name v1 kind id level 2 line 39
name := kind :=_op level 2 line 39
name v2 kind id level 2 line 39
name ; kind ;_bd level 2 line 39
name v2 kind id level 2 line 40
name := kind :=_op level 2 line 40
name v3 kind id level 2 line 40
name ; kind ;_bd level 2 line 40
name end kind end_Re level 2 line 41
name ; kind ;_bd level 1 line 41
name begin kind begin_Re level 2 line 42
name v3 kind id level 2 line 43
name := kind :=_op level 2 line 43
name 1 kind number level 2 line 43
name ; kind ;_bd level 2 line 43
name call kind call_Re level 2 line 44
name p1 kind id level 2 line 44
name ; kind ;_bd level 2 line 44
name write kind write_Re level 2 line 45
name ( kind (_bd level 2 line 45
name c1 kind id level 2 line 45
name , kind ,_bd level 2 line 45
name c1 kind id level 2 line 45
name * kind *_op level 2 line 45
name v1 kind id level 2 line 45
name , kind ,_bd level 2 line 45
name c1 kind id level 2 line 45
name * kind *_op level 2 line 45
name v1 kind id level 2 line 45
name / kind /_op level 2 line 45
name 2 kind number level 2 line 45
name ) kind )_bd level 2 line 45
name ; kind ;_bd level 2 line 45
name end kind end_Re level 2 line 46
name ; kind ;_bd level 1 line 46
name read kind read_Re level 1 line 47
name ( kind (_bd level 1 line 47
name v1 kind id level 1 line 47
name ) kind )_bd level 1 line 47
name ; kind ;_bd level 1 line 47
name v2 kind id level 1 line 48
name := kind :=_op level 1 line 48
name v1 kind id level 1 line 48
name ; kind ;_bd level 1 line 48
name call kind call_Re level 1 line 49
name p2 kind id level 1 line 49
name ; kind ;_bd level 1 line 49
name write kind write_Re level 1 line 50
name ( kind (_bd level 1 line 50
name v2 kind id level 1 line 50
name ) kind )_bd level 1 line 50
name ; kind ;_bd level 1 line 50
name end kind end_Re level 1 line 51
name ; kind ;_bd level 0 line 51
name . kind ._bd level 0 line 51
num 2
num 2
num 2
num 2
num 1
num 0
num 2
num 1
num 1
num 2
num 1
num 1
num 2
